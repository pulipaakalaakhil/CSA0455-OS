#include <stdio.h>

struct process {
    int id;                 
    int burst_time;         
    int arrival_time;       
    int remaining_time;     
    int priority;          
    int completion_time;    
    int turn_around_time;   
    int waiting_time;       
};

void sort_processes_by_arrival(struct process proc[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (proc[i].arrival_time > proc[j].arrival_time) {
                struct process temp = proc[i];
                proc[i] = proc[j];
                proc[j] = temp;
            }
        }
    }
}

void preemptive_priority_scheduling(struct process proc[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    int time = 0, completed = 0;
    int min_priority;

    while (completed != n) {
        min_priority = -1;
        int selected_process = -1;

        for (int i = 0; i < n; i++) {
            if (proc[i].arrival_time <= time && proc[i].remaining_time > 0) {
                if (min_priority == -1 || proc[i].priority < min_priority) {
                    min_priority = proc[i].priority;
                    selected_process = i;
                }
            }
        }

        if (selected_process == -1) {
            time++;
            continue;
        }

        proc[selected_process].remaining_time--;

        if (proc[selected_process].remaining_time == 0) {
            proc[selected_process].completion_time = time + 1;
            proc[selected_process].turn_around_time = proc[selected_process].completion_time - proc[selected_process].arrival_time;
            proc[selected_process].waiting_time = proc[selected_process].turn_around_time - proc[selected_process].burst_time;

            total_waiting_time += proc[selected_process].waiting_time;
            total_turnaround_time += proc[selected_process].turn_around_time;
            completed++;
        }

        time++;
    }

    printf("\nProcess ID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burst_time, proc[i].arrival_time,
               proc[i].waiting_time, proc[i].turn_around_time);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process proc[n];

    
    printf("\nEnter the Burst Time, Arrival Time, and Priority for each process:\n");
    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Process %d:\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &proc[i].burst_time);
        proc[i].remaining_time = proc[i].burst_time;  
        printf("Arrival Time: ");
        scanf("%d", &proc[i].arrival_time);
        printf("Priority: ");
        scanf("%d", &proc[i].priority);
    }

    sort_processes_by_arrival(proc, n);

    preemptive_priority_scheduling(proc, n);

    return 0;
}
