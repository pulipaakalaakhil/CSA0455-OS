#include <stdio.h>
#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

// Available instances of each resource
int available[MAX_RESOURCES] = {3, 3, 2};

// Maximum demand for each process
int maximum[MAX_PROCESSES][MAX_RESOURCES] = {
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
};

// Allocation of resources to processes
int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};

// Need matrix: What each process still needs to complete its work
int need[MAX_PROCESSES][MAX_RESOURCES];

// Function to calculate the need matrix
void calculate_need() {
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            need[i][j] = maximum[i][j] - allocation[i][j];
        }
    }
}

// Function to check if the system is in a safe state using Banker's Algorithm
int is_safe() {
    int work[MAX_RESOURCES];
    int finish[MAX_PROCESSES] = {0};  // Track finished processes
    int count = 0;

    // Initialize work array to available resources
    for (int i = 0; i < MAX_RESOURCES; i++) {
        work[i] = available[i];
    }

    // Try to find a safe sequence
    while (count < MAX_PROCESSES) {
        int found = 0;
        for (int i = 0; i < MAX_PROCESSES; i++) {
            if (finish[i] == 0) {
                int j;
                // Check if the process can be finished with the current available resources
                for (j = 0; j < MAX_RESOURCES; j++) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }

                if (j == MAX_RESOURCES) { // All resources needed by process are available
                    // If process can finish, release its allocated resources to work
                    for (int k = 0; k < MAX_RESOURCES; k++) {
                        work[k] += allocation[i][k];
                    }
                    finish[i] = 1;
                    found = 1;
                    count++;
                }
            }
        }

        if (found == 0) {
            return 0;  // No process can finish, not a safe state
        }
    }

    return 1; 
}

int request_resources(int process_num, int request[]) {
    for (int i = 0; i < MAX_RESOURCES; i++) {
        if (request[i] > available[i] || request[i] > need[process_num][i]) {
            return 0;  // Request cannot be granted
        }
    }

    for (int i = 0; i < MAX_RESOURCES; i++) {
        available[i] -= request[i];
        allocation[process_num][i] += request[i];
        need[process_num][i] -= request[i];
    }

    if (is_safe()) {
        return 1;  // Request granted
    } else {
        for (int i = 0; i < MAX_RESOURCES; i++) {
            available[i] += request[i];
            allocation[process_num][i] -= request[i];
            need[process_num][i] += request[i];
        }
        return 0;  // Request denied
    }
}

int main() {
    int process_num, request[MAX_RESOURCES];

    calculate_need();

    printf("Enter process number (0 to 4): ");
    scanf("%d", &process_num);

    if (process_num < 0 || process_num >= MAX_PROCESSES) {
        printf("Invalid process number.\n");
        return 1;
    }

    printf("Enter resource request (e.g., 0 1 0): ");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        scanf("%d", &request[i]);
    }

    if (request_resources(process_num, request)) {
        printf("Request granted.\n");
    } else {
        printf("Request denied. System is not in a safe state.\n");
    }

    return 0;
}
